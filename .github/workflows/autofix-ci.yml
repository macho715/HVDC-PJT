name: autofix.ci Integration - HVDC Project
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      scope:
        description: 'Fix scope (all, critical, security)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - critical
          - security
          - performance

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

jobs:
  autofix-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -U pip
          pip install -e ".[dev]"
          pip install autofix-ci

      - name: Run quality checks
        run: |
          echo "Running quality checks..."
          ruff check . --output-format=github
          mypy src/ --ignore-missing-imports --explicit-package-bases
          pytest -v --tb=short --cov=src --cov-report=xml

      - name: Run autofix.ci analysis
        env:
          AUTOFIX_API_KEY: ${{ secrets.AUTOFIX_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
        run: |
          echo "Running autofix.ci analysis..."
          autofix-ci analyze --config .autofix.yml --scope ${{ github.event.inputs.scope || 'all' }}

      - name: Generate fix suggestions
        env:
          AUTOFIX_API_KEY: ${{ secrets.AUTOFIX_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Generating fix suggestions..."
          autofix-ci suggest --config .autofix.yml --output suggestions.json

      - name: Apply automated fixes
        env:
          AUTOFIX_API_KEY: ${{ secrets.AUTOFIX_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Applying automated fixes..."
          autofix-ci fix --config .autofix.yml --apply

      - name: Check if changes were made
        id: changes
        run: |
          if git diff --quiet HEAD; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
            git diff --stat
          fi

      - name: Run post-fix quality checks
        if: steps.changes.outputs.changes == 'true'
        run: |
          echo "Running post-fix quality checks..."
          ruff check . --output-format=github
          mypy src/ --ignore-missing-imports --explicit-package-bases
          pytest -v --tb=short --cov=src --cov-report=xml

      - name: Create/Update PR
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN || github.token }}
          commit-message: "ü§ñ autofix.ci: automated code improvements"
          title: "ü§ñ autofix.ci: Automated Code Improvements"
          branch: autofix-ci/${{ github.run_id }}
          base: ${{ github.event.pull_request.base.ref || 'main' }}
          delete-branch: true
          body: |
            ## ü§ñ Automated Code Improvements by autofix.ci
            
            **Scope:** ${{ github.event.inputs.scope || 'all' }}
            **Quality Checks:** MyPy, Ruff, Pytest, Security
            
            ### Changes Made
            - Applied automated fixes using autofix.ci
            - Quality gates: MyPy + Ruff + Pytest + Security
            - Generated unified diff and applied via git
            
            ### Quality Checks
            - ‚úÖ MyPy type checking
            - ‚úÖ Ruff linting
            - ‚úÖ Black formatting
            - ‚úÖ Pytest execution
            - ‚úÖ Security scanning
            
            ### Next Steps
            - [ ] Review changes
            - [ ] Run full test suite
            - [ ] Merge if approved
            
            ---
            *This PR was automatically generated by autofix.ci*

      - name: Comment result on PR
        if: github.event_name == 'pull_request' && steps.changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: "‚úÖ **autofix.ci Completed**\n\n- **Scope:** ${{ github.event.inputs.scope || 'all' }}\n- **Status:** Changes applied and PR created\n- **PR:** [View Pull Request](https://github.com/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }})"
            })

      - name: Comment no changes
        if: github.event_name == 'pull_request' && steps.changes.outputs.changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: "‚ÑπÔ∏è **autofix.ci Completed**\n\n- **Scope:** ${{ github.event.inputs.scope || 'all' }}\n- **Status:** No changes needed - code is already compliant"
            })

      - name: Upload autofix reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: autofix-reports-${{ github.run_id }}
          path: |
            suggestions.json
            autofix.log
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    if: github.event.inputs.scope == 'security' || github.event.inputs.scope == 'all'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install security tools
        run: |
          pip install -U pip
          pip install bandit safety semgrep

      - name: Run security scan
        run: |
          echo "Running security scan..."
          bandit -r src/ tools/ -f json -o bandit-report.json
          safety check --json --output safety-report.json
          semgrep --config=auto --json --output=semgrep-report.json src/ tools/

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
          retention-days: 30
