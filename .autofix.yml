# autofix.ci configuration for HVDC Project
# Automated code fixing service integration

# Project configuration
project_name: "HVDC Project - Samsung C&T Logistics & ADNOCÂ·DSV Partnership"
project_description: "Advanced logistics AI system with MACHO-GPT v3.4-mini integration"

# Repository settings
repository: "macho715/HVDC-PJT"
branch: "main"
base_branch: "main"

# AI model configuration
model: "gpt-4o"
temperature: 0.1
max_tokens: 4000

# Code quality settings
quality_checks:
  - "mypy"
  - "ruff"
  - "black"
  - "pytest"
  - "bandit"
  - "safety"

# File patterns
include_patterns:
  - "src/**/*.py"
  - "tools/**/*.py"
  - "tests/**/*.py"
  - "*.py"

exclude_patterns:
  - "**/__pycache__/**"
  - "**/.*"
  - "**/node_modules/**"
  - "**/venv/**"
  - "**/env/**"
  - "**/.git/**"
  - "**/reports/**"
  - "**/logs/**"

# HVDC-specific prompts
system_prompt: |
  You are a senior software engineer specializing in logistics systems for the HVDC Project.
  
  PROJECT CONTEXT:
  - Samsung C&T Logistics & ADNOCÂ·DSV Strategic Partnership
  - MACHO-GPT v3.4-mini integration required
  - TDD and Kent Beck's "Tidy First" principles
  - FANR/MOIAT compliance for nuclear materials
  - Real-time logistics optimization
  
  CORE MODULES:
  - Inv-OCR: Invoice processing with 95%+ confidence
  - Heat-Stow: Container stowage optimization (â‰¤4t/mÂ² pressure)
  - WHF/Cap: Warehouse capacity management
  - WeatherTie: Weather-based ETA adjustments
  - HSRisk: Hazardous materials risk assessment
  - CostGuard: Cost optimization and monitoring
  - CertChk: FANR/MOIAT certification validation
  - MCP-Agent: Multi-agent workflow orchestration
  - API/RAG: Real-time data integration
  - Predictive-Analytics: AI-driven forecasting
  
  CODING STANDARDS:
  - Follow TDD cycle: Red â†’ Green â†’ Refactor
  - Maintain HVDC project structure
  - Preserve MACHO-GPT integration
  - Include comprehensive error handling
  - Add type hints and docstrings
  - Write logistics domain tests
  
  QUALITY REQUIREMENTS:
  - MyPy type checking compliance
  - Ruff linting standards
  - Black code formatting
  - Pytest test coverage â‰¥90%
  - Security scanning compliance
  
  When making changes:
  1. Always maintain existing business logic
  2. Preserve MACHO-GPT v3.4-mini compatibility
  3. Follow logistics domain best practices
  4. Include appropriate error handling
  5. Add/update tests as needed
  6. Update documentation if required

# Fix strategies
fix_strategies:
  - "type_annotations"
  - "import_optimization"
  - "code_formatting"
  - "error_handling"
  - "test_coverage"
  - "security_fixes"
  - "performance_optimization"

# Pull request settings
pull_request:
  title_template: "ðŸ¤– autofix.ci: {description}"
  body_template: |
    ## ðŸ¤– Automated Code Fix by autofix.ci
    
    **Description:** {description}
    **Files Changed:** {file_count}
    **Quality Checks:** {quality_checks}
    
    ### Changes Made
    - Applied automated fixes using {model}
    - Quality gates: {quality_checks}
    - Generated unified diff and applied via git
    
    ### Quality Checks
    - âœ… MyPy type checking
    - âœ… Ruff linting
    - âœ… Black formatting
    - âœ… Pytest execution
    - âœ… Security scanning
    
    ### Next Steps
    - [ ] Review changes
    - [ ] Run full test suite
    - [ ] Merge if approved
    
    ---
    *This PR was automatically generated by autofix.ci*

# Notification settings
notifications:
  slack:
    enabled: false
    webhook_url: "${SLACK_WEBHOOK_URL}"
  email:
    enabled: false
    recipients: ["team@hvdc-project.com"]
  github:
    enabled: true
    comment_on_pr: true
    comment_on_issue: true

# Security settings
security:
  api_key: "${AUTOFIX_API_KEY}"
  github_token: "${GITHUB_TOKEN}"
  openai_api_key: "${OPENAI_API_KEY}"
  
# Scheduling
schedule:
  enabled: true
  cron: "0 2 * * 1"  # Weekly on Monday at 2 AM
  timezone: "UTC"

# Limits
limits:
  max_files_per_run: 50
  max_changes_per_file: 100
  max_total_changes: 500
  timeout_minutes: 30

# Integration settings
integrations:
  github_actions:
    enabled: true
    workflow_file: ".github/workflows/autofix-ci.yml"
  codex_fix:
    enabled: true
    workflow_file: ".github/workflows/codex-fix.yaml"
  quality_gates:
    enabled: true
    workflow_file: ".github/workflows/quality-gates.yaml"
