name: Codex Fix - HVDC Project
on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      path:
        description: 'Target directory path'
        required: false
        default: 'src'
        type: string
      task:
        description: 'Task description'
        required: false
        default: 'fix mypy errors'
        type: string
      max_diff:
        description: 'Maximum diff size'
        required: false
        default: '8000'
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  run-codex:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/codex'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse command arguments
        id: args
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "path=${{ github.event.inputs.path }}" >> $GITHUB_OUTPUT
            echo "task=${{ github.event.inputs.task }}" >> $GITHUB_OUTPUT
            echo "max_diff=${{ github.event.inputs.max_diff }}" >> $GITHUB_OUTPUT
          else
            # Parse from issue comment
            BODY="${{ github.event.comment.body }}"
            echo "path=$(echo "$BODY" | grep -o 'path=[^[:space:]]*' | cut -d'=' -f2 || echo 'src')" >> $GITHUB_OUTPUT
            echo "task=$(echo "$BODY" | grep -o 'task="[^"]*"' | cut -d'"' -f2 || echo 'fix mypy errors')" >> $GITHUB_OUTPUT
            echo "max_diff=$(echo "$BODY" | grep -o 'max_diff=[0-9]*' | cut -d'=' -f2 || echo '8000')" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -U pip
          pip install -U mypy ruff pytest
          pip install -U openai==1.*
          pip install -U pathlib

      - name: Create tools directory
        run: mkdir -p tools

      - name: Run Codex agent (generate patch)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python tools/codex_fix.py \
            --path "${{ steps.args.outputs.path }}" \
            --task "${{ steps.args.outputs.task }}" \
            --max-diff "${{ steps.args.outputs.max_diff }}"

      - name: Quality gates
        run: |
          echo "Running quality checks..."
          ruff check . --output-format=github || true
          mypy "${{ steps.args.outputs.path }}" --ignore-missing-imports --explicit-package-bases || true
          pytest -q --tb=short || true

      - name: Check if changes were made
        id: changes
        run: |
          if git diff --quiet HEAD; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
            git diff --stat
          fi

      - name: Create/Update PR
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_TOKEN || github.token }}
          commit-message: "codex: automated fix ‚Äî ${{ steps.args.outputs.task }}"
          title: "ü§ñ Codex: ${{ steps.args.outputs.task }}"
          branch: codex/${{ github.run_id }}
          base: ${{ github.event.pull_request.base.ref || 'main' }}
          delete-branch: true
          body: |
            ## ü§ñ Automated Code Fix by Codex Agent
            
            **Scope:** `${{ steps.args.outputs.task }}`  
            **Target:** `${{ steps.args.outputs.path }}`  
            **Max Diff:** `${{ steps.args.outputs.max_diff }}` characters
            
            ### Changes Made
            - Applied automated fixes using OpenAI GPT-4
            - Quality gates: ruff + mypy + pytest
            - Generated unified diff and applied via git
            
            ### Quality Checks
            - ‚úÖ Ruff linting
            - ‚úÖ MyPy type checking  
            - ‚úÖ Pytest execution
            
            ### Next Steps
            - [ ] Review changes
            - [ ] Run full test suite
            - [ ] Merge if approved
            
            ---
            *This PR was automatically generated by the Codex Fix workflow*

      - name: Comment result on issue
        if: github.event_name == 'issue_comment' && steps.changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: "‚úÖ **Codex Fix Completed**\n\n- **Task:** `${{ steps.args.outputs.task }}`\n- **Target:** `${{ steps.args.outputs.path }}`\n- **Status:** Changes applied and PR created\n- **PR:** [View Pull Request](https://github.com/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }})"
            })

      - name: Comment no changes
        if: github.event_name == 'issue_comment' && steps.changes.outputs.changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: "‚ÑπÔ∏è **Codex Fix Completed**\n\n- **Task:** `${{ steps.args.outputs.task }}`\n- **Target:** `${{ steps.args.outputs.path }}`\n- **Status:** No changes needed - code is already compliant"
            })

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex-logs-${{ github.run_id }}
          path: |
            .github/workflows/codex-fix.log
          retention-days: 7