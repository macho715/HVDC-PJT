name: Quality Gates - HVDC Project
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -U pip
          pip install -e ".[dev]"

      - name: Run Ruff linting
        run: |
          echo "Running Ruff linting..."
          ruff check . --output-format=github

      - name: Run Black formatting check
        run: |
          echo "Running Black formatting check..."
          black --check --diff .

      - name: Run isort import sorting check
        run: |
          echo "Running isort import sorting check..."
          isort --check-only --diff .

      - name: Run MyPy type checking
        run: |
          echo "Running MyPy type checking..."
          mypy src/ --ignore-missing-imports --explicit-package-bases

      - name: Run pytest
        run: |
          echo "Running pytest..."
          pytest -v --tb=short --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment PR with quality results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage report if it exists
            let coverageInfo = '';
            try {
              const coveragePath = './coverage.xml';
              if (fs.existsSync(coveragePath)) {
                coverageInfo = '\nüìä **Coverage report generated**';
              }
            } catch (e) {
              console.log('No coverage report found');
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## üîç Quality Gates Results
              
              **Status:** ‚úÖ All quality checks passed
              
              ### Checks Completed:
              - ‚úÖ Ruff linting
              - ‚úÖ Black formatting
              - ‚úÖ isort import sorting
              - ‚úÖ MyPy type checking
              - ‚úÖ pytest execution
              ${coverageInfo}
              
              **Ready for review!** üöÄ`
            })

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install security tools
        run: |
          pip install -U pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          echo "Running Bandit security scan..."
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Run Safety dependency scan
        run: |
          echo "Running Safety dependency scan..."
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30
