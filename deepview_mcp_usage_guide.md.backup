# 🔍 DeepView MCP 고급 분석 및 시각화 활용 가이드

## 📊 DeepView MCP 개요

**DeepView MCP**는 MACHO-GPT v3.4-mini 시스템의 핵심 시각화 및 고급 분석 서버입니다. 93MB 메모리를 사용하는 대용량 분석 엔진으로, 복잡한 물류 데이터의 시각화와 인사이트 도출을 담당합니다.

### 🎯 주요 기능
- **고급 시각화**: Sankey, Treemap, 3D 지도 등
- **대용량 데이터 분석**: 수만 건의 물류 데이터 처리
- **실시간 대시보드**: 동적 차트 및 인터랙티브 그래프
- **예측 모델링**: 시계열 분석 및 트렌드 예측
- **Heat-Stow 분석**: 창고 적재 최적화 시각화

---

## 🚀 기본 활용 방법

### 1. **MACHO-GPT 명령어로 DeepView 호출**

```bash
# 기본 시각화 명령어
python hvdc_macho_gpt/src/logi_meta_fixed.py 'logi_master kpi-dash'

# 고급 분석 명령어
python hvdc_macho_gpt/src/logi_meta_fixed.py 'logi_master weather-tie'
```

### 2. **직접 DeepView MCP 서버 호출**

```bash
# DeepView MCP 서버 상태 확인
npx deepview-mcp stdio

# 고급 시각화 요청
npx deepview-mcp stdio --visualize --type sankey --data warehouse_flow.json
```

---

## 📈 고급 시각화 활용

### 1. **Sankey Flow Chart (물류 흐름 분석)**

```python
# DeepView MCP를 통한 Sankey 차트 생성
def create_sankey_flow_chart():
    """
    물류 흐름 Sankey 차트 생성
    Port → Warehouse → Site 흐름 시각화
    """
    
    # DeepView MCP 호출
    sankey_data = {
        "nodes": [
            {"id": "Port", "category": "source"},
            {"id": "DSV Indoor", "category": "warehouse"},
            {"id": "DSV Outdoor", "category": "warehouse"},
            {"id": "DSV Al Markaz", "category": "warehouse"},
            {"id": "Site A", "category": "destination"},
            {"id": "Site B", "category": "destination"}
        ],
        "links": [
            {"source": "Port", "target": "DSV Indoor", "value": 1500},
            {"source": "Port", "target": "DSV Outdoor", "value": 2200},
            {"source": "DSV Indoor", "target": "Site A", "value": 1200},
            {"source": "DSV Outdoor", "target": "Site B", "value": 1800}
        ]
    }
    
    return sankey_data
```

### 2. **Treemap Cost Analysis (비용 분석)**

```python
# DeepView MCP를 통한 Treemap 비용 분석
def create_treemap_cost_analysis():
    """
    비용 구조 Treemap 시각화
    창고별, 화물 유형별 비용 분포 분석
    """
    
    treemap_data = {
        "data": [
            {"Category": "DSV Indoor", "Subcategory": "HE", "value": 1678475},
            {"Category": "DSV Indoor", "Subcategory": "SIM", "value": 158445},
            {"Category": "DSV Outdoor", "Subcategory": "SCT", "value": 878463},
            {"Category": "DSV Outdoor", "Subcategory": "HE", "value": 786939},
            {"Category": "DSV Al Markaz", "Subcategory": "ALL", "value": 1973800}
        ]
    }
    
    return treemap_data
```

### 3. **3D Warehouse Map (창고 3D 시각화)**

```python
# DeepView MCP를 통한 3D 창고 지도
def create_3d_warehouse_map():
    """
    3D 창고 위치 및 활용도 시각화
    Deck.gl 기반 인터랙티브 3D 지도
    """
    
    warehouse_3d_data = {
        "warehouses": [
            {
                "name": "DSV Indoor",
                "latitude": 25.2048,
                "longitude": 55.2708,
                "utilization": 95.0,
                "capacity": 1000,
                "packages": 1500
            },
            {
                "name": "DSV Outdoor", 
                "latitude": 25.2048,
                "longitude": 55.2708,
                "utilization": 85.0,
                "capacity": 2000,
                "packages": 1700
            }
        ],
        "routes": [
            {
                "source": "DSV Indoor",
                "target": "Site A",
                "movements": 500
            }
        ]
    }
    
    return warehouse_3d_data
```

---

## 🔧 고급 분석 기능

### 1. **Heat-Stow Analysis (적재 압력 분석)**

```python
# DeepView MCP를 통한 Heat-Stow 분석
def analyze_heat_stow_pressure():
    """
    창고 구역별 적재 압력 Heatmap 분석
    압력 한계 4t/m² 준수 검증
    """
    
    heat_stow_data = {
        "warehouse": "DSV Indoor",
        "grid_size": "4x4",
        "pressure_data": [
            {"zone": "A1", "pressure": 3.2, "status": "safe"},
            {"zone": "A2", "pressure": 4.1, "status": "warning"},
            {"zone": "B1", "pressure": 2.8, "status": "safe"},
            {"zone": "B2", "pressure": 3.9, "status": "safe"}
        ],
        "recommendations": [
            "Zone A2 압력 감소 필요",
            "Zone B1 추가 적재 가능"
        ]
    }
    
    return heat_stow_data
```

### 2. **Time Series Analysis (시계열 분석)**

```python
# DeepView MCP를 통한 시계열 분석
def analyze_time_series_data():
    """
    월별 창고 이동량 시계열 분석
    계절성 패턴 및 트렌드 예측
    """
    
    time_series_data = {
        "period": "2024-01 to 2024-12",
        "locations": ["DSV Indoor", "DSV Outdoor", "DSV Al Markaz"],
        "monthly_data": [
            {"month": "2024-01", "DSV Indoor": 150, "DSV Outdoor": 200, "DSV Al Markaz": 50},
            {"month": "2024-02", "DSV Indoor": 180, "DSV Outdoor": 220, "DSV Al Markaz": 60},
            {"month": "2024-03", "DSV Indoor": 160, "DSV Outdoor": 190, "DSV Al Markaz": 55}
        ],
        "trends": {
            "DSV Indoor": "increasing",
            "DSV Outdoor": "stable", 
            "DSV Al Markaz": "increasing"
        }
    }
    
    return time_series_data
```

### 3. **Predictive Analytics (예측 분석)**

```python
# DeepView MCP를 통한 예측 분석
def run_predictive_analytics():
    """
    향후 6개월 창고 용량 예측
    머신러닝 기반 예측 모델
    """
    
    prediction_data = {
        "horizon": "6 months",
        "warehouses": ["DSV Indoor", "DSV Outdoor", "DSV Al Markaz"],
        "predictions": [
            {
                "month": "2025-01",
                "DSV Indoor": {"predicted_usage": 85, "confidence": 0.92},
                "DSV Outdoor": {"predicted_usage": 78, "confidence": 0.89},
                "DSV Al Markaz": {"predicted_usage": 45, "confidence": 0.85}
            },
            {
                "month": "2025-02", 
                "DSV Indoor": {"predicted_usage": 87, "confidence": 0.90},
                "DSV Outdoor": {"predicted_usage": 80, "confidence": 0.88},
                "DSV Al Markaz": {"predicted_usage": 48, "confidence": 0.83}
            }
        ],
        "risk_alerts": [
            "DSV Indoor: 2025-02 용량 초과 위험",
            "DSV Al Markaz: 낮은 활용도 개선 필요"
        ]
    }
    
    return prediction_data
```

---

## 🎨 시각화 템플릿

### 1. **Samsung C&T 브랜드 차트**

```python
# Figma Design Token 기반 브랜드 차트
FIGMA_TOKENS = {
    'colors': {
        'primary': {
            '500': '#0066CC',  # Samsung Blue
            '700': '#004499',  # Dark Blue
            '300': '#3388DD'   # Light Blue
        },
        'secondary': {
            '500': '#FF6B35',  # Samsung Orange
            '700': '#CC4400',  # Dark Orange
            '300': '#FF9966'   # Light Orange
        }
    },
    'typography': {
        'font_family': 'SamsungOne, "Malgun Gothic", sans-serif'
    }
}

def create_branded_chart(chart_type, data):
    """
    Samsung C&T 브랜드 가이드라인 적용 차트
    """
    chart_config = {
        "colors": FIGMA_TOKENS['colors']['primary'],
        "font": FIGMA_TOKENS['typography']['font_family'],
        "title": "HVDC Project Analysis",
        "data": data
    }
    
    return chart_config
```

### 2. **접근성 고려 차트**

```python
# 색맹 안전 팔레트 (≥3:1 contrast)
ACCESSIBLE_COLORS = {
    'primary': '#0066CC',    # Blue
    'secondary': '#FF6B35',  # Orange  
    'success': '#00AA44',    # Green
    'warning': '#FFAA00',    # Yellow
    'error': '#D50000',      # Red
    'neutral': '#808080'     # Gray
}

def create_accessible_chart(chart_type, data):
    """
    접근성을 고려한 차트 생성
    색맹 안전, 고대비, 명확한 라벨링
    """
    accessible_config = {
        "colors": ACCESSIBLE_COLORS,
        "contrast_ratio": "3:1",
        "labels": "clear",
        "data": data
    }
    
    return accessible_config
```

---

## 🔧 MACHO-GPT 통합 활용

### 1. **명령어 체인 활용**

```bash
# DeepView MCP를 활용한 고급 분석 체인
python hvdc_macho_gpt/src/logi_meta_fixed.py 'logi_master kpi-dash' --deepview=true
python hvdc_macho_gpt/src/logi_meta_fixed.py 'switch_mode ORACLE' --visualization=advanced
python hvdc_macho_gpt/src/logi_meta_fixed.py 'logi_master weather-tie' --sankey=true
```

### 2. **실시간 대시보드 생성**

```python
# DeepView MCP를 통한 실시간 대시보드
def generate_realtime_dashboard():
    """
    실시간 KPI 대시보드 생성
    DeepView MCP + MACHO-GPT 통합
    """
    
    dashboard_data = {
        "kpi_metrics": {
            "warehouse_utilization": 85.2,
            "cost_efficiency": 92.1,
            "processing_time": 2.3,
            "accuracy_rate": 97.3
        },
        "visualizations": [
            {"type": "sankey", "data": "warehouse_flow"},
            {"type": "treemap", "data": "cost_analysis"},
            {"type": "heatmap", "data": "pressure_analysis"},
            {"type": "3d_map", "data": "warehouse_locations"}
        ],
        "alerts": [
            {"level": "warning", "message": "DSV Indoor 용량 90% 도달"},
            {"level": "info", "message": "DSV Al Markaz 활용도 개선 필요"}
        ]
    }
    
    return dashboard_data
```

---

## 📊 성능 최적화

### 1. **메모리 사용량 최적화**

```python
# DeepView MCP 메모리 최적화 설정
DEEPVIEW_CONFIG = {
    "memory_limit": "100MB",
    "cache_enabled": True,
    "compression": True,
    "batch_size": 1000
}

def optimize_deepview_performance():
    """
    DeepView MCP 성능 최적화
    메모리 사용량 93MB → 80MB 목표
    """
    optimization_settings = {
        "data_compression": "enabled",
        "lazy_loading": "enabled", 
        "cache_strategy": "LRU",
        "batch_processing": "enabled"
    }
    
    return optimization_settings
```

### 2. **응답 시간 개선**

```python
# DeepView MCP 응답 시간 최적화
def optimize_response_time():
    """
    응답 시간 최적화
    목표: <2분 → <1분
    """
    performance_settings = {
        "parallel_processing": True,
        "data_preloading": True,
        "chart_caching": True,
        "lazy_rendering": True
    }
    
    return performance_settings
```

---

## 🎯 활용 시나리오

### 1. **일상 업무 (PRIME 모드)**
- 기본 KPI 대시보드 생성
- 창고별 활용도 차트
- 월별 트렌드 분석

### 2. **고급 분석 (ORACLE 모드)**
- Sankey Flow Chart 생성
- 예측 모델링 시각화
- 실시간 데이터 분석

### 3. **적재 최적화 (LATTICE 모드)**
- Heat-Stow 압력 분석
- 3D 창고 지도
- 적재 패턴 시각화

### 4. **비용 관리 (COST-GUARD 모드)**
- Treemap 비용 분석
- 비용 효율성 차트
- 예산 대비 실적 분석

---

## 🔧 문제 해결

### 1. **메모리 부족 오류**
```bash
# DeepView MCP 메모리 증가
npx deepview-mcp stdio --memory-limit=150MB
```

### 2. **차트 렌더링 실패**
```bash
# DeepView MCP 재시작
taskkill /F /PID 29276
npx deepview-mcp stdio
```

### 3. **데이터 로딩 지연**
```python
# 데이터 압축 및 최적화
def optimize_data_loading():
    return {
        "compression": "gzip",
        "chunk_size": 500,
        "preload": True
    }
```

---

**© 2025 MACHO-GPT v3.4-mini | DeepView MCP 활용 가이드** 