#!/usr/bin/env python3
"""
HVDC WAREHOUSE_INVOICE ÌååÏùº Íµ¨Ï°∞ ÏÉÅÏÑ∏ Î∂ÑÏÑù
PKG Ïª¨ÎüºÍ≥º Î≤§Îçî Ï†ïÎ≥¥ (HVDC CODE 3) Î∂ÑÏÑù
"""

import pandas as pd
import numpy as np

def analyze_invoice_structure():
    """INVOICE ÌååÏùº Íµ¨Ï°∞ Î∂ÑÏÑù"""
    
    print("üìä HVDC WAREHOUSE_INVOICE ÌååÏùº Íµ¨Ï°∞ Î∂ÑÏÑù")
    print("=" * 60)
    
    try:
        df_invoice = pd.read_excel('hvdc_macho_gpt/WAREHOUSE/data/HVDC WAREHOUSE_INVOICE.xlsx')
        
        print(f"‚úÖ INVOICE Îç∞Ïù¥ÌÑ∞ Î°úÎìú: {len(df_invoice)}Í±¥")
        print(f"   Ïª¨Îüº Ïàò: {len(df_invoice.columns)}Í∞ú")
        print()
        
        # Ï†ÑÏ≤¥ Ïª¨Îüº Î™©Î°ù
        print("=== Ï†ÑÏ≤¥ Ïª¨Îüº Î™©Î°ù ===")
        for i, col in enumerate(df_invoice.columns, 1):
            print(f"{i:2d}. {col}")
        print()
        
        # PKG Ïª¨Îüº Î∂ÑÏÑù (ÏÜåÎ¨∏Ïûê 'pkg' ÌôïÏù∏)
        pkg_col = None
        if 'PKG' in df_invoice.columns:
            pkg_col = 'PKG'
        elif 'pkg' in df_invoice.columns:
            pkg_col = 'pkg'
        
        if pkg_col:
            print(f"=== {pkg_col} Ïª¨Îüº Î∂ÑÏÑù ===")
            pkg_total = df_invoice[pkg_col].sum()
            pkg_stats = df_invoice[pkg_col].describe()
            
            print(f"{pkg_col} Ï¥ùÌï©: {pkg_total:,}Í∞ú")
            print(f"{pkg_col} ÌèâÍ∑†: {pkg_stats['mean']:.1f}Í∞ú")
            print(f"{pkg_col} Ï§ëÍ∞ÑÍ∞í: {pkg_stats['50%']:.0f}Í∞ú")
            print(f"{pkg_col} Î≤îÏúÑ: {pkg_stats['min']:.0f} ~ {pkg_stats['max']:.0f}Í∞ú")
            print(f"{pkg_col} NULL Í∞í: {df_invoice[pkg_col].isnull().sum()}Í∞ú")
            print()
            
            # PKG Î∂ÑÌè¨
            print(f"{pkg_col} Í∞í Î∂ÑÌè¨:")
            pkg_dist = df_invoice[pkg_col].value_counts().sort_index()
            for pkg_val, count in pkg_dist.head(10).items():
                print(f"  {pkg_val}Í∞ú: {count}Í±¥")
            print()
        
        # HVDC CODE 3 Î≤§Îçî Î∂ÑÏÑù
        if 'HVDC CODE 3' in df_invoice.columns:
            print("=== HVDC CODE 3 Î≤§Îçî Î∂ÑÏÑù ===")
            vendor_codes = df_invoice['HVDC CODE 3'].value_counts().dropna()
            
            print("Î≤§Îçî ÏΩîÎìú Î∂ÑÌè¨:")
            for vendor, count in vendor_codes.items():
                print(f"  {vendor}: {count}Í±¥")
            print()
            
            # Î≤§ÎçîÎ≥Ñ PKG ÏßëÍ≥Ñ
            if pkg_col:
                print("=== Î≤§ÎçîÎ≥Ñ PKG ÏßëÍ≥Ñ ===")
                vendor_pkg = df_invoice.groupby('HVDC CODE 3')[pkg_col].sum().sort_values(ascending=False)
                
                for vendor, pkg_count in vendor_pkg.items():
                    pct = pkg_count / vendor_pkg.sum() * 100
                    print(f"  {vendor}: {pkg_count:,}Í∞ú ({pct:.1f}%)")
                
                total_pkg = vendor_pkg.sum()
                print(f"  Ï¥ùÌï©: {total_pkg:,}Í∞ú")
                print()
                
                # HITACHI/SIMENSE ÎπÑÍµê
                print("=== Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ÏôÄ ÎπÑÍµê ===")
                hitachi_pkg = vendor_pkg.get('HE', 0)
                simense_pkg = vendor_pkg.get('SIM', 0)
                other_vendors = []
                other_pkg_total = 0
                
                for vendor, pkg_count in vendor_pkg.items():
                    if vendor not in ['HE', 'SIM']:
                        other_vendors.append(f"{vendor}({pkg_count})")
                        other_pkg_total += pkg_count
                
                print(f"INVOICE HE (HITACHI): {hitachi_pkg:,}Í∞ú")
                print(f"Ïã§Ï†ú HITACHI Îç∞Ïù¥ÌÑ∞: 5,346Í∞ú")
                print(f"Ï∞®Ïù¥: {hitachi_pkg - 5346:+,}Í∞ú")
                print()
                
                print(f"INVOICE SIM (SIMENSE): {simense_pkg:,}Í∞ú")
                print(f"Ïã§Ï†ú SIMENSE Îç∞Ïù¥ÌÑ∞: 2,227Í∞ú") 
                print(f"Ï∞®Ïù¥: {simense_pkg - 2227:+,}Í∞ú")
                print()
                
                print(f"Í∏∞ÌÉÄ Î≤§Îçî Ï¥ù {len(other_vendors)}Í∞ú: {other_pkg_total:,}Í∞ú")
                print(f"  {', '.join(other_vendors)}")
                print()
                
                print(f"INVOICE Ï†ÑÏ≤¥: {total_pkg:,}Í∞ú")
                print(f"Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥: {7573:,}Í∞ú (HITACHI 5,346 + SIMENSE 2,227)")
                print(f"Ï†ÑÏ≤¥ Ï∞®Ïù¥: {total_pkg - 7573:+,}Í∞ú")
        
        # HVDC CODE Ïª¨ÎüºÎì§ ÎπÑÍµê
        print("\n=== HVDC CODE Ïª¨ÎüºÎì§ ÎπÑÍµê ===")
        hvdc_cols = [col for col in df_invoice.columns if 'HVDC CODE' in col]
        
        for col in hvdc_cols:
            unique_count = df_invoice[col].nunique()
            null_count = df_invoice[col].isnull().sum()
            print(f"{col}: {unique_count}Í∞ú Í≥†Ïú†Í∞í, {null_count}Í∞ú NULL")
            
            # ÏÉòÌîå Í∞íÎì§
            sample_values = df_invoice[col].dropna().unique()[:5]
            print(f"  ÏÉòÌîå: {list(sample_values)}")
        
        print("\n" + "="*60)
        print("üéØ INVOICE Íµ¨Ï°∞ Î∂ÑÏÑù ÏôÑÎ£å")
        
    except Exception as e:
        print(f"‚ùå Î∂ÑÏÑù Ïã§Ìå®: {e}")

if __name__ == "__main__":
    analyze_invoice_structure() 