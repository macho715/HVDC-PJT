# 🎨 Figma MCP Complete Guide for HVDC Warehouse Visualization

## 📋 Overview

Figma MCP (Model Context Protocol) 서버를 HVDC 프로젝트의 3D 창고 시각화 시스템과 통합하여 디자인-투-코드 워크플로우를 구축합니다.

## 🚀 Quick Start

### 1. Prerequisites
- Node.js 18.0.0 이상
- Python 3.8 이상
- Figma 계정 및 Personal Access Token

### 2. Installation

```bash
# HVDC 프로젝트 디렉토리로 이동
cd HVDC_PJT

# Figma MCP 서버 설치 확인
npx figma-developer-mcp --version

# Python 의존성 설치
pip install requests
```

### 3. Environment Setup

```bash
# Figma API 키 설정 (Windows PowerShell)
$env:FIGMA_API_KEY="your_figma_personal_access_token_here"

# 또는 환경변수 파일 생성
echo "FIGMA_API_KEY=your_figma_personal_access_token_here" > .env
```

## 🔧 Configuration

### MCP Server Configuration

`figma_mcp_config.json` 파일을 생성하여 MCP 서버를 설정합니다:

```json
{
  "mcpServers": {
    "Framelink Figma MCP": {
      "command": "cmd",
      "args": [
        "/c",
        "npx",
        "-y",
        "figma-developer-mcp",
        "--figma-api-key=YOUR-FIGMA-API-KEY",
        "--stdio"
      ]
    }
  }
}
```

### IDE Integration

Cursor IDE에서 MCP 서버를 활성화하려면:

1. Cursor 설정 파일 열기
2. MCP 서버 설정 추가
3. IDE 재시작

## 📁 Project Structure

```
HVDC_PJT/
├── Figma-Context-MCP/              # Figma MCP 서버
├── src/
│   ├── warehouse_ui_wireframe.svg  # SVG 와이어프레임
│   ├── components/                 # 생성된 React 컴포넌트
│   └── warehouse_3d_visualization_system.py
├── figma_mcp_integration.py        # 통합 스크립트
├── figma_mcp_commands.py           # 명령어 시스템
├── figma_mcp_config.json           # MCP 서버 설정
├── hvdc_figma_template.json        # HVDC 템플릿
└── FIGMA_MCP_COMPLETE_GUIDE.md     # 이 가이드
```

## 🎯 Workflow

### 1. Design Phase (Figma)

#### SVG Wireframe Import
```bash
# SVG 와이어프레임을 Figma로 가져오기
python figma_mcp_commands.py import_svg src/warehouse_ui_wireframe.svg
```

#### Design System Creation
1. Figma에서 새 파일 생성
2. 컴포넌트 라이브러리 구축
3. 디자인 토큰 정의
4. 레이아웃 구성

### 2. Development Phase (Code Generation)

#### Design Tokens Extraction
```bash
# Figma 파일에서 디자인 토큰 추출
python figma_mcp_commands.py extract_tokens YOUR_FIGMA_FILE_ID
```

#### React Components Generation
```bash
# Figma 디자인을 React 컴포넌트로 변환
python figma_mcp_commands.py generate_components YOUR_FIGMA_FILE_ID src/components
```

### 3. Integration Phase (3D Visualization)

#### Component Integration
```typescript
// 생성된 컴포넌트를 3D 시각화 시스템에 통합
import WarehouseCrate from './components/WarehouseCrate';
import KPICard from './components/KPICard';

// 3D 시각화 시스템에서 사용
const WarehouseVisualization = () => {
  return (
    <div className="warehouse-3d-view">
      <div className="kpi-dashboard">
        <KPICard 
          title="Total Items"
          value={totalItems}
          color="success"
        />
      </div>
      <div className="3d-viewport">
        {crates.map(crate => (
          <WarehouseCrate
            key={crate.id}
            {...crate}
            onClick={() => handleCrateClick(crate.id)}
          />
        ))}
      </div>
    </div>
  );
};
```

## 🎨 Design System

### Color Palette

```css
/* Primary Colors */
--primary-blue: #2196f3;    /* Plastic crates */
--primary-brown: #8d6e63;   /* Wooden crates */
--primary-gray: #9e9e9e;    /* Steel crates */
--primary-yellow: #ffc107;  /* Aisle */
--primary-red: #dc3545;     /* Excluded items */

/* UI Colors */
--background: #f8f9fa;
--surface: #ffffff;
--border: #dee2e6;
--text-primary: #495057;
--text-secondary: #6c757d;
```

### Component Library

#### WarehouseCrate Component
```typescript
interface WarehouseCrateProps {
  id: string;
  dimensions: {
    length: number;
    width: number;
    height: number;
  };
  material: 'plastic' | 'wood' | 'steel';
  weight: number;
  position: {
    x: number;
    y: number;
    z: number;
  };
  status: 'placed' | 'excluded' | 'pending';
  onClick?: () => void;
}
```

#### KPICard Component
```typescript
interface KPICardProps {
  title: string;
  value: number | string;
  unit?: string;
  trend?: 'up' | 'down' | 'stable';
  color: 'success' | 'warning' | 'danger' | 'info';
}
```

## 🔧 Commands Reference

### Setup Commands

```bash
# MCP 서버 설정
python figma_mcp_commands.py setup_server

# 연결 테스트
python figma_mcp_commands.py test_connection

# HVDC 템플릿 생성
python figma_mcp_commands.py create_template
```

### Design Commands

```bash
# SVG 가져오기
python figma_mcp_commands.py import_svg <svg_path> [file_id]

# 디자인 토큰 추출
python figma_mcp_commands.py extract_tokens <file_id>

# React 컴포넌트 생성
python figma_mcp_commands.py generate_components <file_id> [output_dir]
```

### Help Commands

```bash
# 도움말 보기
python figma_mcp_commands.py help
```

## 📊 Integration Examples

### 1. Complete Workflow

```bash
# 1. MCP 서버 설정
python figma_mcp_commands.py setup_server

# 2. SVG 와이어프레임 가져오기
python figma_mcp_commands.py import_svg src/warehouse_ui_wireframe.svg

# 3. Figma에서 디자인 완성 후 토큰 추출
python figma_mcp_commands.py extract_tokens YOUR_FIGMA_FILE_ID

# 4. React 컴포넌트 생성
python figma_mcp_commands.py generate_components YOUR_FIGMA_FILE_ID src/components

# 5. 3D 시각화 시스템에 통합
# 생성된 컴포넌트를 warehouse_3d_visualization_system.py에 import
```

### 2. Real-time Sync

```python
# 실시간 동기화를 위한 워치 모드
import time
from figma_mcp_integration import FigmaMCPIntegration

figma = FigmaMCPIntegration()

def watch_figma_changes(file_id: str, interval: int = 30):
    """Figma 파일 변경사항을 주기적으로 확인"""
    while True:
        try:
            # 디자인 토큰 추출
            tokens_result = figma.extract_figma_design_tokens(file_id)
            
            if tokens_result['status'] == 'SUCCESS':
                # 변경사항이 있으면 컴포넌트 재생성
                figma.generate_react_components(file_id, "src/components")
                print(f"✅ Components updated at {time.strftime('%H:%M:%S')}")
            
            time.sleep(interval)
            
        except Exception as e:
            print(f"❌ Watch error: {e}")
            time.sleep(interval)

# 워치 모드 시작
watch_figma_changes("YOUR_FIGMA_FILE_ID", 60)  # 1분마다 확인
```

## 🎯 HVDC Specific Features

### 1. Warehouse Layout Components

```typescript
// 창고 레이아웃 컴포넌트
interface WarehouseLayout {
  zones: {
    A: ZoneConfig;
    B: ZoneConfig;
  };
  aisles: AisleConfig[];
  storageAreas: StorageAreaConfig[];
}

interface ZoneConfig {
  dimensions: { width: number; height: number };
  capacity: number;
  materialTypes: string[];
  pressureLimit: number;  // t/m²
}
```

### 2. KPI Dashboard Integration

```typescript
// KPI 대시보드 컴포넌트
interface KPIDashboard {
  metrics: {
    totalItems: number;
    utilizationRate: number;
    averageWeight: number;
    pressureLoad: number;
  };
  alerts: Alert[];
  trends: TrendData[];
}
```

### 3. 3D Visualization Controls

```typescript
// 3D 시각화 컨트롤
interface Viewport3D {
  camera: {
    position: { x: number; y: number; z: number };
    rotation: { x: number; y: number; z: number };
  };
  grid: {
    size: number;
    divisions: number;
  };
  lighting: {
    ambient: number;
    directional: number;
  };
}
```

## 🔄 Development Workflow

### 1. Design Iteration

1. **Figma에서 디자인 수정**
2. **디자인 토큰 추출**
   ```bash
   python figma_mcp_commands.py extract_tokens YOUR_FIGMA_FILE_ID
   ```
3. **컴포넌트 재생성**
   ```bash
   python figma_mcp_commands.py generate_components YOUR_FIGMA_FILE_ID
   ```
4. **3D 시각화 시스템 업데이트**

### 2. Code Review Process

1. **생성된 컴포넌트 검토**
2. **타입 안전성 확인**
3. **성능 최적화**
4. **테스트 작성**

### 3. Deployment

1. **컴포넌트 빌드**
2. **3D 시각화 시스템 통합**
3. **성능 테스트**
4. **배포**

## 🚨 Troubleshooting

### Common Issues

#### 1. Figma API Key Error
```bash
# 해결방법
export FIGMA_API_KEY="your_actual_api_key"
# 또는
$env:FIGMA_API_KEY="your_actual_api_key"
```

#### 2. MCP Server Not Found
```bash
# 해결방법
npm install -g figma-developer-mcp
# 또는
npx figma-developer-mcp --help
```

#### 3. Component Generation Failed
```bash
# 해결방법
# 1. Figma 파일 ID 확인
# 2. API 키 권한 확인
# 3. 파일 접근 권한 확인
```

### Debug Mode

```bash
# 디버그 모드로 실행
python figma_mcp_commands.py test_connection
python figma_mcp_commands.py extract_tokens YOUR_FIGMA_FILE_ID --debug
```

## 📈 Performance Optimization

### 1. Component Optimization

```typescript
// 메모이제이션을 통한 성능 최적화
import React, { memo, useMemo } from 'react';

const WarehouseCrate = memo(({ id, dimensions, material, ...props }) => {
  const style = useMemo(() => ({
    width: dimensions.length * 10,
    height: dimensions.width * 10,
    backgroundColor: getMaterialColor(material),
  }), [dimensions, material]);

  return <div style={style} {...props} />;
});
```

### 2. Batch Processing

```python
# 배치 처리를 통한 성능 최적화
def batch_generate_components(file_ids: List[str], output_dir: str):
    """여러 Figma 파일에서 컴포넌트를 배치로 생성"""
    results = []
    
    for file_id in file_ids:
        result = figma.generate_react_components(file_id, output_dir)
        results.append(result)
    
    return results
```

## 🔮 Future Enhancements

### 1. Advanced Features

- **Real-time Collaboration**: 다중 사용자 실시간 협업
- **Version Control**: 디자인 버전 관리
- **Automated Testing**: 자동화된 컴포넌트 테스트
- **Performance Monitoring**: 성능 모니터링

### 2. Integration Extensions

- **SketchUp Integration**: SketchUp 파일 직접 가져오기
- **Blender Integration**: Blender 3D 모델 통합
- **CAD Integration**: CAD 파일 지원
- **IoT Integration**: 실시간 센서 데이터 연동

### 3. AI-Powered Features

- **Auto-Layout**: AI 기반 자동 레이아웃
- **Smart Components**: 지능형 컴포넌트 생성
- **Predictive Analytics**: 예측 분석
- **Natural Language Interface**: 자연어 인터페이스

## 📚 Resources

### Documentation
- [Figma API Documentation](https://www.figma.com/developers/api)
- [MCP Protocol Documentation](https://modelcontextprotocol.io/)
- [Framelink Figma MCP](https://www.framelink.ai/)

### Tools
- [Figma Personal Access Tokens](https://help.figma.com/hc/en-us/articles/8085703771159)
- [Cursor IDE](https://cursor.sh/)
- [React Documentation](https://react.dev/)

### Community
- [Figma Community](https://www.figma.com/community)
- [MCP Discord](https://discord.gg/modelcontextprotocol)
- [HVDC Project Repository](https://github.com/your-org/hvdc-project)

---

🔧 **추천 명령어:**
/figma_mcp setup_server [Figma MCP 서버 설정]
/figma import_svg warehouse_ui_wireframe.svg [SVG 와이어프레임 가져오기]
/figma extract_tokens [FILE_ID] [디자인 토큰 추출]
/figma generate_components [FILE_ID] [React 컴포넌트 생성]
/3d_visualization integrate_figma [3D 시각화 + Figma 연동] 